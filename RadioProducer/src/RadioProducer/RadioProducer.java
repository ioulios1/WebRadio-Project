
package RadioProducer;

import java.awt.Color;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilenameFilter;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.TargetDataLine;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.DefaultListModel;
import javax.swing.JSlider;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import java.io.IOException;
import java.nio.file.Files;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;

/**
 *
 * @authors 
 * ioulios tsiko 131027
 * theofilos axiotis 131011
 */
public class RadioProducer extends javax.swing.JFrame {
    
    
    boolean recordind=false;
    boolean trackOn=false;
    
    ByteArrayOutputStream byteOutputStream;
    AudioFormat adFormat;
    TargetDataLine targetDataLine;
    AudioInputStream InputStream;
    SourceDataLine sourceLine;
    Thread captureThread;
    Thread chatThread;
    
    String fileName="";
    int index=0;
    
    DefaultListModel model;
    
    double volume=100;
    double mic_volume=0;
    double[] farray=new double[1];
    
    public String filePath2; // = "../src/RadioProducer/audio_files/";
    
    String title;
    
    /**
     * Βρίσκει το path που υπάρχουν τα τραγούδια και στη συνέχεια εάν είναι αρχεία
     * ήχου (wav-mp3) τα φορτώνει στην Jlist, μέσω της οποίας ο παραγωγός επιλέγει.
     */
    public RadioProducer() {        
        
        loadMusicFiles();
        
        initComponents();
        captureThread = new Thread(new CaptureThread());
        chatThread = new Thread(new ChatThread());       
        
    }
    

     public final void loadMusicFiles()
     {
        File folder;
        
        filePath2 = new File("").getAbsolutePath();
        filePath2+="/audio_files/";
        //filePath2+="/src/RadioProducer/audio_files/";        
        
        folder = new File(filePath2);
        
        File [] listofFiles=folder.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                String lowercaseName = name.toLowerCase();
                if (lowercaseName.endsWith(".wav") || lowercaseName.endsWith(".mp3") ) {
                        return true;
                } else {
                        return false;
                }
            }
        });
        
        model = new DefaultListModel();
        
        for (int i = 0; i < listofFiles.length; i++) {
            model.addElement(listofFiles[i].getName());
        }
        
     }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JFileChooser = new javax.swing.JFileChooser();
        trackSlider = new javax.swing.JSlider();
        micSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        recording = new javax.swing.JRadioButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea1 = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        addMusic = new javax.swing.JButton();
        track_rbtn = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();

        JFileChooser.setAcceptAllFileFilterUsed(false);
        JFileChooser.setApproveButtonText("open");
        JFileChooser.addChoosableFileFilter(new FileFilter() {

            public String getDescription() {
                return "mp3 Files (*.mp3)";
            }

            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().toLowerCase().endsWith(".mp3");
                }
            }
        });
        JFileChooser.addChoosableFileFilter(new FileFilter() {

            public String getDescription() {
                return "Audio Files (*.wav)";
            }

            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().toLowerCase().endsWith(".wav");
                }
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(150, 150, 150));
        setPreferredSize(new java.awt.Dimension(850, 580));
        setResizable(false);

        trackSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        trackSlider.setPaintLabels(true);
        trackSlider.setPaintTicks(true);
        trackSlider.setValue(100);
        trackSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                trackSliderStateChanged(evt);
            }
        });

        micSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        micSlider.setValue(0);
        micSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                micSliderStateChanged(evt);
            }
        });

        jLabel1.setText("Microphone");

        jLabel2.setText("Track");

        jList1.setModel(model);
        jList1.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                title= jList1.getSelectedValue().toString();
                if(title.endsWith(".wav") || title.endsWith(".mp3"))
                {

                    farray = read(filePath2+title);
                    index=0;
                    trackOn=true;
                }

            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel3.setText("Playlist");

        recording.setText("Recording");
        recording.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordingActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Mute");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton2.setText("Mute");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        textArea1.setEditable(false);
        textArea1.setColumns(20);
        textArea1.setRows(5);
        jScrollPane2.setViewportView(textArea1);

        jButton1.setText("Clear Chat");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Chat");

        addMusic.setText("+");
        addMusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMusicActionPerformed(evt);
            }
        });

        track_rbtn.setText("Pause Track");
        track_rbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                track_rbtnActionPerformed(evt);
            }
        });

        jButton2.setText("Stop");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(recording)
                            .addGap(74, 74, 74)
                            .addComponent(track_rbtn))
                        .addComponent(jScrollPane2)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(39, 39, 39)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jToggleButton1))
                                    .addComponent(micSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(trackSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(16, 16, 16)
                                            .addComponent(jLabel2)))
                                    .addGap(67, 67, 67))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(37, 37, 37)
                                    .addComponent(jToggleButton2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addMusic))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(403, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recording)
                    .addComponent(track_rbtn))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(addMusic, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(trackSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jToggleButton2)
                            .addComponent(jButton2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(micSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jToggleButton1)))
                .addGap(28, 28, 28)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Ξεκινά την ηχογράφηση ανοίγοντας το stream με το server
     * @param evt 
     */
    private void recordingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordingActionPerformed
               
        recording.setBackground(Color.red);
        
         try {
            recordind=true;
            adFormat = getAudioFormat();
            DataLine.Info dataLineInfo = new DataLine.Info(TargetDataLine.class, adFormat);
            targetDataLine = (TargetDataLine) AudioSystem.getLine(dataLineInfo);
            targetDataLine.open(adFormat);
            targetDataLine.start();
            captureThread.start();            
            chatThread.start();
           
        } catch (LineUnavailableException ex) {
            Logger.getLogger(RadioProducer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_recordingActionPerformed

    
    /*Diabazei tin timi tou slider kai analogws dinei stream i oxi. 
      Pros to paron apla tsekarw an i timi einai 100 opote kai to afinw na
      streamarei. Sti sunexeia mporoume na xamilwnoume kai ton ixo kanonika */
    private void trackSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_trackSliderStateChanged
        // TODO add your handling code here:
        
         trackSlider = (JSlider) evt.getSource();
         jToggleButton2.setSelected(false);
            if (!trackSlider.getValueIsAdjusting())
                 
                volume = trackSlider.getValue();
                    
              
            
    }//GEN-LAST:event_trackSliderStateChanged

    /*Microphone volume slider*/
    private void micSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_micSliderStateChanged
                
         micSlider = (JSlider) evt.getSource();
         jToggleButton1.setSelected(false);
         if (!micSlider.getValueIsAdjusting())
            mic_volume = micSlider.getValue();                    
                
    }//GEN-LAST:event_micSliderStateChanged

    /**
     * Μηδενίζει την τιμή του track ή την επαναφέρει. Αν 0 τότε δεν παιρνά ήχος 
     * μικροφώνου
     * @param evt 
     */
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
      if(jToggleButton1.isSelected())
      {
        mic_volume=0;
        micSlider.setValue(0);
        jToggleButton1.setSelected(true);
      }
      else
      {
        mic_volume=50;
        micSlider.setValue(50);
      }
      
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * Μηδενίζει την τιμή του track ή την επαναφέρει. Αν 0 τότε δεν παιρνά ήχος 
     * τραγουδιού
     * @param evt 
     */
    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        if(jToggleButton2.isSelected())
      {
        volume=0;
        trackSlider.setValue(0);
      }
      else
      {
        volume=50;
        trackSlider.setValue(50);
      }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    /**
     * Σβήνει το textArea που υπάρχουν τα σχόλια
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        textArea1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Προσθέτει ένα τραγούδι στην playlist. Χρησιμοποιεί το FileChooser της java,
     * και αφου λάβει το path του αρχείου , το αντιγράφει στον φάκελο με τα τραγούδια 
     * που χρησιμοποιεί η εφαρμογή
     * @param evt 
     */
    private void addMusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMusicActionPerformed
        
        String fileActualName="";
        int returnVal = JFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            
        File file = JFileChooser.getSelectedFile();       
        
        fileActualName = file.toString().substring(file.toString().lastIndexOf("/") + 1);
        File file_cp = new File(filePath2+"/"+fileActualName);
        
        fileName=file.getAbsolutePath();
        
        model.addElement(fileActualName);
             
                try {
			Files.copy(file.toPath(), file_cp.toPath(), REPLACE_EXISTING);
		} catch (IOException e) {
			e.printStackTrace();
		}
        
        } 
        else {
            System.out.println("File access cancelled by user.");
        }
        
       
    }//GEN-LAST:event_addMusicActionPerformed

    private void track_rbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_track_rbtnActionPerformed
       
        if(track_rbtn.isSelected()){
            trackOn=false;
        }
        else trackOn=true;
        
    }//GEN-LAST:event_track_rbtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        trackOn=false;
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Ορισμός των στοιχείων του ήχου που θα ηχογραφήσουμε ή/καί θα μεταφέρουμε 
     * μέσω του stream.
     * @return 
     */
    private AudioFormat getAudioFormat() {
    float sampleRate = 44100.0F;
    int sampleInbits = 16;
    int channels = 1;
    boolean signed = true;
    boolean bigEndian = false;
    return new AudioFormat(sampleRate, sampleInbits, channels, signed, bigEndian);
    }
    
    /**
     * Η συνάρτηση read χρησιμοποιεί την ReadByte για να μετατρέψει ένα byte array
     * (δηλαδή τα δεδομένα του ήχου) και τα μετατρέπει σε τιμές στο κανονικοποιημένο 
     * εύρος [-1,1]. Αυτό διότι τα δεδομένα που αναπαράγουμε στην ιστοσελίδα μέσω του
     * Web Audio API είναι απαρραίτητο να βρίσκονται σε αυτές τις τιμές.
     * @param filename
     * @return 
     */
    public double[] read(String filename) {
        byte[] data = readByte(filename);
        int n = data.length;
        double[] d = new double[n/2];
        for (int i = 0; i < n/2; i++) {
            d[i] = ((short) (((data[2*i+1] & 0xFF) << 8) + (data[2*i] & 0xFF))) / ((double) Short.MAX_VALUE);
        }
        return d;
    }

    /**
     * Διαβάζει ένα αρχείο ήχου και το επιστρέφει ως byte array, που με τη σειρά
     * της χρησιμοποιεί η read για τη μετατροπή.
     * @param filename
     * @return 
     */
    private byte[] readByte(String filename) {
        byte[] data = null;
        AudioInputStream ais = null;
        try {

            File file = new File(filename);
            
            if (file.exists()) {
                
                if(file.getName().endsWith(".wav"))
                {
                    ais = AudioSystem.getAudioInputStream(file);
                    int bytesToRead = ais.available();
                    data = new byte[bytesToRead];
                    int bytesRead = ais.read(data);
                    if (bytesToRead != bytesRead)
                        throw new IllegalStateException("read only " + bytesRead + " of " + bytesToRead + " bytes"); 
                }
                else if(file.getName().endsWith(".mp3"))
                {
                    
                    AudioFormat af;
                    af = new AudioFormat(44100, 16, 1, true, false);
                    data=getAudioDataBytes(file,af);
                    
                }
            }

           
        }
        catch (IOException e) {
            throw new IllegalArgumentException("could not read '" + filename + "'", e);
        }

        catch (UnsupportedAudioFileException e) {
            throw new IllegalArgumentException("unsupported audio format: '" + filename + "'", e);
        } catch (Exception ex) {
            Logger.getLogger(RadioProducer.class.getName()).log(Level.SEVERE, null, ex);
        }

        return data;
    }
    
    /**
     * Διαβάζει ένα αρχείο mp3 και το μετατρέπει σε wav.
     * @param file
     * @param audioFormat
     * @return
     * @throws UnsupportedAudioFileException
     * @throws IllegalArgumentException
     * @throws Exception 
     */
    public byte [] getAudioDataBytes(File file, AudioFormat audioFormat) throws UnsupportedAudioFileException, IllegalArgumentException, Exception{
        if(file == null || file.length() == 0 || audioFormat == null){
            throw new IllegalArgumentException("Illegal Argument passed to this method");
        }

        ByteArrayInputStream bais = null;
        ByteArrayOutputStream baos = null;
        AudioInputStream sourceAIS = null;
        AudioInputStream convert1AIS = null;
        AudioInputStream convert2AIS = null;

        try{
                        
            sourceAIS = AudioSystem.getAudioInputStream(file);
            AudioFormat sourceFormat = sourceAIS.getFormat();
            AudioFormat convertFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, sourceFormat.getSampleRate(), 16, sourceFormat.getChannels(), sourceFormat.getChannels()*2, sourceFormat.getSampleRate(), false);
            convert1AIS = AudioSystem.getAudioInputStream(convertFormat, sourceAIS);
            convert2AIS = AudioSystem.getAudioInputStream(audioFormat, convert1AIS);

            baos = new ByteArrayOutputStream();

            byte [] buffer = new byte[8192];
            while(true){
                int readCount = convert2AIS.read(buffer, 0, buffer.length);
                if(readCount == -1){
                    break;
                }
                baos.write(buffer, 0, readCount);
            }
            return baos.toByteArray();
        } catch(UnsupportedAudioFileException uafe){
            //uafe.printStackTrace();
            throw uafe;
        } catch(IOException ioe){
            //ioe.printStackTrace();
            throw ioe;
        } catch(IllegalArgumentException iae){
            //iae.printStackTrace();
            throw iae;
        } catch (Exception e) {
            //e.printStackTrace();
            throw e;
        }finally{
            if(baos != null){
                try{
                    baos.close();
                }catch(Exception e){
                }
            }
            if(convert2AIS != null){
                try{
                    convert2AIS.close();
                }catch(Exception e){
                }
            }
            if(convert1AIS != null){
                try{
                    convert1AIS.close();
                }catch(Exception e){
                }
            }
            if(sourceAIS != null){
                try{
                    sourceAIS.close();
                }catch(Exception e){
                }
            }
            if(bais != null){
                try{
                    bais.close();
                }catch(Exception e){
                }
            }
        }
    }

     
    /**
     * Κώδικας καταγραφής του ήχου απο μικρόφωνο ή απο αρχείο. Αφου το state είναι 
     * true κάνει τις ενέργειες. Στο τέλος πακετάρει τα δεδομένα και τα αποστέλλει στο
     * server
     */
    class CaptureThread extends Thread {

    byte tempBuffer[] = new byte[1024];
    
    

    @Override
    public void run() {

        byteOutputStream = new ByteArrayOutputStream();
        
        try {
            
            DatagramSocket clientSocket = new DatagramSocket(8786);
            
            //InetAddress IPAddress = InetAddress.getByName("192.168.1.2");
            InetAddress IPAddress = InetAddress.getByName("localhost");        
            
            double temp;
            double[] array=new double[1];
            int cnt=0;
            int i=0;
            
            String json;
            
            //κατάσταση ηχογράφησης - radio button checked
            while (recordind) {
               
                cnt = targetDataLine.read(tempBuffer, 0, tempBuffer.length);
                array = convertToDouble(tempBuffer);
                                             
                i++;
                if (cnt > 0 && farray.length>1 && trackOn) {
                    
                    
                    String tempTitle;
                    tempTitle=title.replace(".mp3","");
                    tempTitle=tempTitle.replace(".wav","");
                    json="!"+tempTitle+"##";
                    for (i = 0; i < array.length; i++) {
                                                
                        //pollaplasismos me tis times apo ta sliders gia na bgainei h au3omoiwsh tou hxou
                        //realtime. 
                        temp=((array[i]*(mic_volume/100))+(farray[index]* (volume/100)))/2;                        
                        index++;                        
                        json += String.valueOf(temp+",");
                        
                        // το τραγούδι τελείωσε και προχωρά στο επόμενο της playlist.
                        if(index==farray.length)
                        {
                            //index=0;
                           
                            int next_song = jList1.getSelectedIndex()+1;
                            
                            if(jList1.getModel().getSize()==next_song)
                                next_song=0;
                            
                            jList1.setSelectedIndex(next_song);
                            title=jList1.getSelectedValue().toString();
                            farray=read(filePath2+title);
                            
                        }
                       
                    }
                   
                    
                    
                    byte[] bytes = json.getBytes();                    
                    byte[] length=Integer.toString(bytes.length).getBytes();
                    
                    // στέλνει τα πακέτα
                    DatagramPacket sendPacket = new DatagramPacket(length, length.length, IPAddress, 9999);
                    clientSocket.send(sendPacket);
                    sendPacket = new DatagramPacket(bytes, bytes.length, IPAddress, 9999);
                    clientSocket.send(sendPacket);
                    byteOutputStream.write(tempBuffer, 0, cnt);
                    
                }
                
                else if(cnt > 0)
                {
                    json="!##";
                    for (i = 0; i < array.length; i++) {
                        
                        temp=((array[i]*(mic_volume/100)));
                        json += String.valueOf(temp+",");
                    }
                   
                    
                    byte[] bytes = json.getBytes();
                    System.out.println(bytes.length);
                    
                    byte[] length=Integer.toString(bytes.length).getBytes();
                    
                    DatagramPacket sendPacket = new DatagramPacket(length, length.length, IPAddress, 9999);
                    clientSocket.send(sendPacket);
                    sendPacket = new DatagramPacket(bytes, bytes.length, IPAddress, 9999);
                    clientSocket.send(sendPacket);
                    byteOutputStream.write(tempBuffer, 0, cnt);
                }
               
            }
            byteOutputStream.close();
        } catch (Exception e) {
            System.out.println("CaptureThread::run()" + e);
            System.exit(0);
        }
    }
    
    /**
     * Όμοια λειτουργία με τη read , μόνο που εδώ δεν δέχεται δεδομένα απο αρχείο
     * αλλα απο τα δεδομένα που καταγράφονται απο το μικρόφωνο
     * @param data
     * @return 
     */
    public double[] convertToDouble(byte[] data) {
       
        int n = data.length;
        double[] d = new double[n/2];
        
        for (int i = 0; i < n/2; i++) {
            d[i] = (((short) (((data[2*i+1] & 0xFF) << 8) + (data[2*i] & 0xFF))) / ((double) Short.MAX_VALUE) ) ;
        }
        return d;
    }
    
    
    }



class ChatThread extends Thread {

    
    public void run() {

        byteOutputStream = new ByteArrayOutputStream();
        
        try {
            DatagramSocket clientSocket = new DatagramSocket(8785);
            
            //InetAddress IPAddress = InetAddress.getByName("localhost");
            
            byte[] msgBuffer;
            
            DatagramPacket receivePacket;
            System.out.println("Chat");
            String temp;
            
            while (true) {
                    msgBuffer=new byte[2];
                    receivePacket = new DatagramPacket(msgBuffer, msgBuffer.length);
                    clientSocket.receive(receivePacket);
                    temp=new String(msgBuffer);
                    
                    msgBuffer=new byte[Integer.parseInt(temp)];
                    receivePacket = new DatagramPacket(msgBuffer, msgBuffer.length);
                    clientSocket.receive(receivePacket);
                    temp=new String(msgBuffer);
                    textArea1.append(temp+"\n");
            }
            
        } catch (Exception e) {
            System.out.println("CaptureThread::run()" + e);
            System.exit(0);
        }
    }
    
}
  
    
 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RadioProducer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RadioProducer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RadioProducer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RadioProducer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RadioProducer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser JFileChooser;
    private javax.swing.JButton addMusic;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JSlider micSlider;
    private javax.swing.JRadioButton recording;
    private javax.swing.JTextArea textArea1;
    private javax.swing.JSlider trackSlider;
    private javax.swing.JRadioButton track_rbtn;
    // End of variables declaration//GEN-END:variables
}
